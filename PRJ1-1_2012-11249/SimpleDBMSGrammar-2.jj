options{  //LOOKAHEAD = 3;  static = true;  //DEBUG_PARSER = true;  //DEBUG_TOKEN_MANAGER = true;  IGNORE_CASE = true;}PARSER_BEGIN(SimpleDBMSParser)public class SimpleDBMSParser{  // set query number  public static final int PRINT_SYNTAX_ERROR = 0;  public static final int PRINT_CREATE_TABLE = 1;  public static final int PRINT_DROP_TABLE = 2;  public static final int PRINT_DESC = 3;  public static final int PRINT_SHOW_TABLES = 4;  public static final int PRINT_SELECT = 5;  public static final int PRINT_INSERT = 6;  public static final int PRINT_DELETE = 7;    public static void main(String args[]) throws ParseException  {    SimpleDBMSParser parser = new SimpleDBMSParser(System.in);    System.out.print("DB_2012-11249> ");    while (true)    {	        try      {        parser.command();      }      catch (Exception e)      {        printMessage(PRINT_SYNTAX_ERROR);        SimpleDBMSParser.ReInit(System.in);      }    }  }  public static void printMessage(int q)  {    switch(q)    {      case PRINT_SYNTAX_ERROR:      	System.out.println("Syntax error");      	break;      case PRINT_CREATE_TABLE:      	System.out.println("\'CREATE TABLE\' requested");      	break;      case PRINT_DROP_TABLE:      	System.out.println("\'DROP TABLE\' requested");      	break;      case PRINT_DESC:      	System.out.println("\'DESC\' requested");      	break;      case PRINT_SHOW_TABLES:      	System.out.println("\'SHOW TABLES\' requested");      	break;      case PRINT_SELECT:      	System.out.println("\'SELECT\' requested");      	break;      case PRINT_INSERT:      	System.out.println("\'INSERT\' requested");      	break;      case PRINT_DELETE:      	System.out.println("\'DELETE\' requested");      	break;      	          }    System.out.print("DB_2012-11249> ");  }}PARSER_END(SimpleDBMSParser)SKIP : { " " | "\r" | "\t" | "\n" }// set tokens according to grammar.docx, use < IS_NULL >, < IS_NOT_NULL > token additionallyTOKEN : /* Keywords */{  < EXIT : "exit" >| < INT : "int" >| < CHAR : "char" >| < DATE : "date" >| < CREATE_TABLE : "create table" >| < NOT_NULL : "not null" >| < PRIMARY_KEY : "primary key" >| < FOREIGN_KEY : "foreign key" >| < REFERENCES : "references" >| < DROP_TABLE : "drop table" >| < DESC : "desc" >| < SHOW_TABLES : "show tables" >| < SELECT : "select" >| < ASTERISK : "*" >| < AS : "as" >| < FROM : "from" >| < WHERE : "where" >| < OR : "or" >| < AND : "and" >| < NOT : "not" >| < IS : "is" >| < INSERT_INTO : "insert into" >| < VALUES : "values" >| < NULL : "null" >| < DELETE_FROM : "delete from" >| < IS_NULL : "is null" >| < IS_NOT_NULL : "is not null" >}TOKEN :{  < SEMICOLON : ";" >| < LEFT_PAREN : "(" >| < RIGHT_PAREN : ")" >| < COMMA : "," >| < UNDERSCORE : "_" >| < INT_VALUE : (< SIGN >)? (< DIGIT >)+ >| < SIGN : "+" | "-" >| < DIGIT : [ "0"-"9" ] >| < LEGAL_IDENTIFIER : < ALPHABET > (< ALPHABET > | < UNDERSCORE >)* >| < ALPHABET : [ "a"-"z", "A"-"Z" ] >| < PERIOD : "." >| < L : "<" >| < G : ">" >| < LE : "<=" >| < GE : ">=" >| < EQ : "=" >| < NEQ : "!=" >| < QUOTE : "\'" >		| < NON_QUOTE_SPECIAL_CHARACTER : "!" | "#" | "$" | "%" | "&" | "(" | ")" | "*" | "+" | "," | "-" | "." | "/" | ":"    |  ";" | "<" | "=" | ">" | "?" | "@" | "[" | "\\" | "]" | "^" | "_" | "`" | "{" | "|" | "}" | "~" > | < NON_QUOTE_CHARACTER : < DIGIT > | < ALPHABET> | < NON_QUOTE_SPECIAL_CHARACTER > | " " >| < CHAR_STRING : < QUOTE > ( < NON_QUOTE_CHARACTER > )* < QUOTE > >| < DATE_VALUE : < NNNN > "-" < NN > "-" < NN > > //caution| < NNNN : < DIGIT > < DIGIT > < DIGIT > < DIGIT > >| < NN : < DIGIT > < DIGIT > >}// just see line 310, 379, 395, 415, 422void command() :{}{  queryList()| (    < EXIT >    < SEMICOLON >    {      System.exit(0);    }  ) }void queryList() :{  int q;}{  (    q = query()    < SEMICOLON >    {      printMessage(q);    }  )+}int query() :{  int q;}{  ( createTableQuery() { q = PRINT_CREATE_TABLE; return q; } )| ( dropTableQuery() { q = PRINT_DROP_TABLE; return q; } )| ( descQuery() { q = PRINT_DESC; return q; } )| ( selectQuery() { q = PRINT_SELECT; return q; } )| ( insertQuery() { q = PRINT_INSERT; return q; } )| ( deleteQuery() { q = PRINT_DELETE; return q; } )| ( showTablesQuery() { q = PRINT_SHOW_TABLES; return q; } )}void createTableQuery() :{}{  < CREATE_TABLE >  tableName()  tableElementList()}void tableElementList() :{}{  < LEFT_PAREN >  tableElement()  ( < COMMA > tableElement() )*  < RIGHT_PAREN >}void tableElement() :{}{  columnDefinition() | tableConstraintDefinition()}void columnDefinition() :{}{  columnName()  dataType()  ( < NOT_NULL > )?}void tableConstraintDefinition() :{}{  primaryKeyConstraint() | referentialConstraint()}void primaryKeyConstraint() :{}{  < PRIMARY_KEY >  columnNameList()}void referentialConstraint() :{}{  < FOREIGN_KEY >  columnNameList()  < REFERENCES >  tableName()  columnNameList()}void columnNameList() :{}{  < LEFT_PAREN >  columnName()  ( < COMMA > columnName() )*  < RIGHT_PAREN >}void dataType() :{}{  < INT >| (    < CHAR >    < LEFT_PAREN >    < INT_VALUE >    < RIGHT_PAREN >  )| < DATE >}void tableName() :{}{  < LEGAL_IDENTIFIER >}void columnName() :{}{  < LEGAL_IDENTIFIER >}void dropTableQuery() :{}{  < DROP_TABLE >  tableName()}void descQuery() :{}{  < DESC >  tableName()}void showTablesQuery() :{}{  < SHOW_TABLES >}void selectQuery() :{}{  < SELECT >  selectList()  tableExpression()}void selectList() :{}{  < ASTERISK >| ( selectedColumn() ( < COMMA > selectedColumn() )* )}void selectedColumn() :{}{  // use LOOKAHEAD because tableName() and columnName() has same grammar : legalIdentifier()  ( LOOKAHEAD(2) tableName() < PERIOD > )?  columnName()  ( < AS > columnName() )?}void tableExpression() :{}{  fromClause() ( whereClause() )?}void fromClause() :{}{  < FROM > tableReferenceList()}void tableReferenceList() :{}{  referedTable() ( < COMMA > referedTable() )*}void referedTable() :{}{  tableName() ( < AS > tableName() )?}void whereClause() :{}{  < WHERE > booleanValueExpression()}void booleanValueExpression() :{}{  booleanTerm() ( < OR > booleanTerm() )*}void booleanTerm() :{}{  booleanFactor() ( < AND > booleanFactor() )*}void booleanFactor() :{}{  ( < NOT > )? booleanTest()}void booleanTest() :{}{  predicate() | parenthesizedBooleanExpression()}void parenthesizedBooleanExpression() :{}{  < LEFT_PAREN > booleanValueExpression() < RIGHT_PAREN >}void predicate() :{}{  // use LOOKAHEAD because comparisonPredicate() and nullPredicate() has common atmost 3 tokens  LOOKAHEAD(4)  comparisonPredicate() | nullPredicate()}void comparisonPredicate() :{}{  compOperand()  compOp()  compOperand()}void compOperand() :{}{  // use LOOKAHEAD because tableName() and columnName() has same grammar : legalIdentifier()  comparableValue()| (  ( LOOKAHEAD(2) tableName() < PERIOD > )? columnName() )}void compOp() :{}{  < L > | < G > | < LE > | < GE > | < EQ > | < NEQ >}void comparableValue() :{}{  < INT_VALUE > | < CHAR_STRING > | < DATE_VALUE >}void nullPredicate() :{}{  // use LOOKAHEAD because tableName() and columnName() has same grammar : legalIdentifier()  ( LOOKAHEAD(2) tableName() < PERIOD >)? columnName() nullOperation()}void nullOperation() :{}{  // use additional token to avoid considering is + not + null as is + not null  < IS_NULL >| < IS_NOT_NULL >}void insertQuery() :{}{  < INSERT_INTO > tableName() insertColumnsAndSource()}void insertColumnsAndSource() :{}{  ( columnNameList() )? valueList()}void valueList() :{}{  < VALUES > < LEFT_PAREN > value() ( < COMMA > value() )* < RIGHT_PAREN >}void value() :{}{  < NULL> | comparableValue()}void deleteQuery() :{}{  < DELETE_FROM > tableName() ( whereClause() )?}