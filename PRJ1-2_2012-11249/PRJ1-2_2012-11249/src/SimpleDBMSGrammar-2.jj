options{  //LOOKAHEAD = 3;  static = true;  //DEBUG_PARSER = true;  //DEBUG_TOKEN_MANAGER = true;  IGNORE_CASE = true;}PARSER_BEGIN(SimpleDBMSParser)//importimport java.io.*;import java.util.*;import com.sleepycat.je.Database;import com.sleepycat.je.DatabaseException;import com.sleepycat.je.DatabaseConfig;import com.sleepycat.je.Cursor;import com.sleepycat.je.DatabaseEntry;import com.sleepycat.je.LockMode;import com.sleepycat.je.OperationStatus;import com.sleepycat.je.Environment;import com.sleepycat.je.EnvironmentConfig;class TableInfo {	ArrayList<ColumnDef> cdlist;	ArrayList<PkConstraint> pklist;	ArrayList<FkConstraint> fklist;	public TableInfo(ArrayList<ColumnDef> cdlist, ArrayList<PkConstraint> pklist, ArrayList<FkConstraint> fklist) {		this.cdlist = cdlist;		this.pklist = pklist;		this.fklist = fklist;	}}class TableElement {	String type; // "columnDefinition" or "primaryKeyConstraint" or "foreignKeyConstraint"	ColumnDef columnDef;	PkConstraint pkConst;	FkConstraint fkConst;		public TableElement(String type, ColumnDef cd, PkConstraint pc, FkConstraint fc) {		this.type = type;		columnDef = cd;		pkConst = pc;		fkConst = fc;	}}class ColumnDef {	String columnName;	String dataType;	String notNull;	public ColumnDef(String cn, String dt, String nn) {		columnName = cn;		dataType = dt;		notNull = nn;	}}class PkConstraint {	ArrayList<String> columnNameList;	public PkConstraint(ArrayList<String> cnlist) {		columnNameList = cnlist;	}}class FkConstraint {	ArrayList<String> fkColumnList;	String refTableName;	ArrayList<String> refColumnList;	public FkConstraint(ArrayList<String> fkcl, String rtn, ArrayList<String> rcl) {		fkColumnList = fkcl;		refTableName = rtn;		refColumnList = rcl;	}}public class SimpleDBMSParser{  // set query number  public static final int PRINT_SYNTAX_ERROR = 0;  public static final int PRINT_CREATE_TABLE = 1;  public static final int PRINT_DROP_TABLE = 2;  public static final int PRINT_DESC = 3;  public static final int PRINT_SHOW_TABLES = 4;  public static final int PRINT_SELECT = 5;  public static final int PRINT_INSERT = 6;  public static final int PRINT_DELETE = 7;  public static void printColumnDef(ColumnDef cd) {	System.out.println("columnName: " + cd.columnName);	System.out.println("dataType: " + cd.dataType);	System.out.println("notNull: " + cd.notNull);  }  public static void printPkConstraint(PkConstraint pc) {	for(String s : pc.columnNameList) { System.out.println("pkColumnName: " + s); }  }  public static void printFkConstraint(FkConstraint fc) {	for(String s : fc.fkColumnList) { System.out.println("fkColumnList: " + s); }	System.out.println("refTableName: " + fc.refTableName);	for(String s : fc.refColumnList) { System.out.println("refColumnList: " + s); }  }    public static void closeDb(Database myDatabase, Environment myDbEnvironment) {    if(myDatabase != null) { myDatabase.close(); }    if(myDbEnvironment != null) { myDbEnvironment.close(); }  }  public static Boolean isDuplicateColumnDefError(ArrayList<ColumnDef> cdlist) {	for(int i=0; i<cdlist.size(); i++) {		for(int j=i+1; j<cdlist.size(); j++) {			if(cdlist.get(i).columnName.equalsIgnoreCase(cdlist.get(j).columnName)) {				System.out.println("Create table has failed: column definition is duplicated");		  		return true;			}		}	}//	for(ColumnDef cd : cdlist) {
//		if(set.add(cd.columnName) == false) {
//		  System.out.println("Create table has failed: column definition is duplicated");
//		  return true;
//		}
//	}
	return false;  }  public static Boolean contains(ArrayList<String> list, String s) {	for(int i=0; i<list.size(); i++) {		if(list.get(i).equalsIgnoreCase(s)) {			return true;		}	}	return false;  }    public static Boolean isPrimaryKeyDefError(ArrayList<PkConstraint> pklist, ArrayList<ColumnDef> cdlist) {	ArrayList<String> cnlist = new ArrayList<String>();	for(ColumnDef cd : cdlist) {		cnlist.add(cd.columnName);	}	if(pklist.size() == 1) {	  	for(String pkcn : pklist.get(0).columnNameList) {			if(!contains(cnlist, pkcn)) { System.out.println("Create table has failed: '" + pkcn +  "'does not exists in column definition"); return true; }	  	}		return false;	}	else if(pklist.size() == 0) {	    // case : new error, primary key constraint not exist		System.out.println("Create table has failed: primary key not defined");		return true;	}	else if(pklist.size() > 1) {	    // case : DuplicatePrimaryKeyError		System.out.println("Create table has failed: primary key definition is duplicated");		return true;	}	else {	    // case : new error, strange number like negative 		System.out.println("Create table has failed: primary key definition strange number");		return true;	}		  }  public static String findType(ArrayList<ColumnDef> cdlist, String cn) {	for(ColumnDef cd : cdlist) {	  //System.out.println("findTypeStart");	  //System.out.println("cd.columnName: " + cd.columnName);	  //System.out.println("cn: " + cn);	  //System.out.println("findTypeEnd");	  		if(cd.columnName.equalsIgnoreCase(cn)) {			return cd.dataType;		}	}	//System.out.println("findType non exist;");	return "fail findType";  }  public static ArrayList<String> getStringByKey(Database myDatabase, String key) {	Cursor cursor = null;	String searchKey = key.toLowerCase();	ArrayList<String> valueList = new ArrayList<String>();	try {	    // Create DatabaseEntry objects	    // searchKey is key String.	    DatabaseEntry theKey = new DatabaseEntry(searchKey.getBytes("UTF-8"));	    DatabaseEntry theData = new DatabaseEntry();		    // Open a cursor using a database handle	    cursor = myDatabase.openCursor(null, null);		    // Position the cursor	    // Ignoring the return value for clarity	    OperationStatus retVal = cursor.getSearchKey(theKey, theData, 	                                                 LockMode.DEFAULT);	    	    // Count the number of duplicates. If the count is greater than 1, 	    // print the duplicates.	            while (retVal == OperationStatus.SUCCESS) {            String keyString = new String(theKey.getData(), "UTF-8");            String dataString = new String(theData.getData(), "UTF-8");            valueList.add(dataString);            retVal = cursor.getNextDup(theKey, theData, LockMode.DEFAULT);        }        return valueList;	} catch (Exception e) {	    e.printStackTrace();	    return valueList;	} finally {	   // Make sure to close the cursor	   cursor.close();	}  }  public static Boolean isReferenceError(Database myDatabase, ArrayList<FkConstraint> fklist, ArrayList<ColumnDef> cdlist) {	for(FkConstraint fkc : fklist) {		int fksize = 0;		int refFksize = 0;		fksize = fkc.fkColumnList.size();		refFksize = fkc.refColumnList.size();		// case1 : different number of columns, ReferenceTypeError		if(fksize != refFksize) {			System.out.println("Create table has failed: foreign key references wrong type");			return true;		}				String fkTableName = fkc.refTableName;		ArrayList<String> tableNameList = getStringByKey(myDatabase, "TableName");		// case : ReferenceTableExistenceError		if(!contains(tableNameList, fkTableName)) { System.out.println("Create table has failed: foreign key references non existing table"); return true;}		ArrayList<String> cnlist = new ArrayList<String>();		for(ColumnDef cd : cdlist) {			cnlist.add(cd.columnName);		}		for(int i=0; i<fksize; i++) {			String fkColumn = fkc.fkColumnList.get(i);			String refFkColumn = fkc.refColumnList.get(i);			String fkType = findType(cdlist, fkColumn);			ArrayList<String> valueList = getStringByKey(myDatabase, fkTableName + "." + refFkColumn);			//System.out.println("asdkjfhkjs: " + fkTableName + "." + refFkColumn);			//for(String s : valueList) {			//	System.out.println(s);			//}			//System.out.println("kjashdjkrhsk");			// case : NonExistingColumnDefError			if(!contains(cnlist, fkColumn)) { System.out.println("Create table has failed: '" + fkColumn + "' does not exists in column definition"); return true; }						// case : foreign key references non exist column, ReferenceColumnExistenceError			if(valueList.size() == 0) { System.out.println("Create table has failed: foreign key references non existing column"); return true;}			if(valueList.size() != 1) { System.out.println("multi column name error"); } //return; 			String[] columnInfo = valueList.get(0).split(",");			String refFkType = columnInfo[0];			// case : foreign key column and reference column has diffenrent type, ReferenceTypeError			if(!fkType.equalsIgnoreCase(refFkType)) {			  	//System.out.println("fkColumn: " + fkColumn);			  	//System.out.println("refFkColumn: " + refFkColumn);			  	//System.out.println("fkType: " + fkType);			  	//System.out.println("refFkType: " + refFkType);				System.out.println("Create table has failed: foreign key references wrong type");				return true;			}			// case : foreign key references non primary key , ReferenceNonPrimaryKeyError			if(!columnInfo[2].equalsIgnoreCase("Y")) {				System.out.println("Create table has failed: foreign key references non primary key column");				return true;			}					}							} // fklist iterate	// not case1 nor case2	return false;  }  public static Boolean isTableExistenceError(Database myDatabase, String tableName) {	ArrayList<String> tableNameList = getStringByKey(myDatabase, "TableName");	// case : TableExistenceError	if(contains(tableNameList, tableName)) { System.out.println("Create table has failed: table with the same name already exists"); return true; }	return false;  }  public static void insertData(Database myDatabase, String theKey, String theData) {	Cursor cursor = null;	DatabaseEntry key;	DatabaseEntry data;	try {	  cursor = myDatabase.openCursor(null, null);	  key = new DatabaseEntry(theKey.toLowerCase().getBytes("UTF-8"));	  data = new DatabaseEntry(theData.getBytes("UTF-8"));	  cursor.put(key, data);			} catch(Exception e) {	    e.printStackTrace();	    return;	} finally {		cursor.close();	}	return;  } // public static void deleteData(Database ) { // }  public static Boolean isCharError(ArrayList<ColumnDef> cdlist) {	for(ColumnDef cd : cdlist) {	  	// dataType = char(value)		if(cd.dataType.length() > 4) {			String value;			StringBuilder sb = new StringBuilder();						//System.out.println(cd.dataType);			for(int i=0; i<cd.dataType.length(); i++) {			  char c = cd.dataType.charAt(i);			  //System.out.println(c);			  if((c >= '0' && c <= '9')  || c == '-') {				//System.out.println("hi");			    sb.append(c);			  }			}			value = sb.toString();			//System.out.println("value: " + value);			if(Integer.parseInt(value) < 1) {				System.out.println("Char length should be over 0");				return true;			}		}	}	return false;  }    public static void printAllKeyValue(Database myDatabase) {	System.out.println("printAllKeyValue------------------------------------");	int recordCnt = 0;	DatabaseEntry foundKey = new DatabaseEntry();	DatabaseEntry foundData = new DatabaseEntry();	Cursor cursor = myDatabase.openCursor(null, null);	cursor.getFirst(foundKey, foundData, LockMode.DEFAULT);	do {	  try { 		String keyString = new String(foundKey.getData(), "UTF-8");		String dataString = new String(foundData.getData(), "UTF-8");		System.out.println("key: " + keyString + "@@ value: " + dataString);		recordCnt++;	  } catch(Exception e) {	    System.out.println("error in printAllKeyValue, body is below");		e.printStackTrace();		cursor.close();	  }	} while(cursor.getNext(foundKey, foundData, LockMode.DEFAULT) == OperationStatus.SUCCESS);	System.out.println("#records: " + recordCnt);	cursor.close();  }    public static void createTable(Database myDatabase, String tn, ArrayList<TableElement> telist) {	//ArrayList<String> errorMessageList = new ArrayList<String>();	ArrayList<ColumnDef> cdlist = new ArrayList<ColumnDef>();	ArrayList<PkConstraint> pklist = new ArrayList<PkConstraint>();	ArrayList<FkConstraint> fklist = new ArrayList<FkConstraint>();	Boolean error = false;	Cursor cursor = null;	DatabaseEntry key;	DatabaseEntry data;	//make cdlist, pklist, fklist	for(TableElement te : telist) {		if(te.type.equalsIgnoreCase("columnDefinition")) {			cdlist.add(te.columnDef);		}		else if(te.type.equalsIgnoreCase("primaryKeyConstraint")) {			pklist.add(te.pkConst);		}		else if(te.type.equalsIgnoreCase("foreignKeyConstraint")) {			fklist.add(te.fkConst);		}		else {			System.out.println("telist type error!");		}	}	//for(ColumnDef c : cdlist) { printColumnDef(c); }	//for(PkConstraint p : pklist) { printPkConstraint(p); }	//for(FkConstraint f : fklist) { printFkConstraint(f); }	error = error | isDuplicateColumnDefError(cdlist);	error = error | isPrimaryKeyDefError(pklist, cdlist);	error = error | isTableExistenceError(myDatabase, tn);	error = error | isReferenceError(myDatabase, fklist, cdlist);	error = error | isCharError(cdlist);		// let's store data and print success message because error doesn't exist	if(!error) {	  // print success message	  System.out.println("'" + tn + "' table is created");	  // store data (key, value)	  // 1: ("TableName", tn), 2: (<tableName>.columnDef, "cn,dt,nn"), 3: (<taleName>.<columnName>, "dt,nn,pk,fk")	  // 4: (<tableName>.primaryKey, "cn") , 5: (<tableName>.foreignKey, "@cn,cn, ...cn@tn@cn, ...cn")	  // insertData(myDatabase, key, data);	  // 1: ("TableName", tn)	  insertData(myDatabase, "TableName", tn);	  	  for(ColumnDef cd : cdlist) {		// 3: (<taleName>.<columnName>, "dt,nn,pk,fk")		String isPk = "N";		String isFk = "N";		if(contains(pklist.get(0).columnNameList, cd.columnName)) {		  isPk = "Y";		  cd.notNull = "notNull";		}		for(FkConstraint fkc : fklist) {			if(contains(fkc.fkColumnList, cd.columnName)) { isFk = "Y"; }		}		insertData(myDatabase, tn + "." + cd.columnName, cd.dataType + "," + cd.notNull + "," + isPk + "," + isFk);	    // 2: (<tableName>.columnDef, "cn,dt,nn")		String theData = cd.columnName + "," + cd.dataType + "," + cd.notNull;		insertData(myDatabase, tn + ".columnDef", theData);			  }	  // 4: (<tableName>.primaryKey, "cn")	  for(String cn : pklist.get(0).columnNameList) {		insertData(myDatabase, tn + ".primaryKey", cn);	  }	  // 5: (<tableName>.foreignKey, "@cn,cn, ...cn@tn@cn, ...cn")	  for(FkConstraint fkc : fklist) {		String theData = "";		for(int i=0; i<fkc.fkColumnList.size(); i++) {			theData = theData + fkc.fkColumnList.get(i);			if(i < fkc.fkColumnList.size()-1) { theData = theData + ","; }		}		theData = theData + "@" + fkc.refTableName + "@";		for(int i=0; i<fkc.refColumnList.size(); i++) {			theData = theData + fkc.refColumnList.get(i);			if(i < fkc.refColumnList.size()-1) { theData = theData + ","; }		}				insertData(myDatabase, tn + ".foreignKey", theData);	  }	}	return;  }  public static void showTables(Database myDatabase) {	ArrayList<String> tnlist = getStringByKey(myDatabase, "TableName");	// case : ShowTablesNoTable	if(tnlist.size() == 0) {	  System.out.println("There is no table");	  return;	}		System.out.println("----------------");	for(String tn : tnlist) {		System.out.println(tn);	}	System.out.println("----------------");	//printAllKeyValue(myDatabase);  }  public static void desc(Database myDatabase, String tn) {	ArrayList<String> tnlist = getStringByKey(myDatabase, "TableName");	// case : NoSuchTable	if(!contains(tnlist, tn)) { System.out.println("No such table"); return; }	ArrayList<String> cdlist = getStringByKey(myDatabase, tn+".columnDef");	System.out.println("-------------------------------------------------");	System.out.println("table_name [" + tn + "]");	String COLUMNNAME = "column_name";	String TYPE = "type";	String NULL = "null";	String KEY = "key";	System.out.printf("%-20s %-10s %-10s %-10s\n", COLUMNNAME, TYPE, NULL, KEY);	// extract column names of tn	for(String cd : cdlist) {		String cn = cd.split(",")[0];		String dtnnpkfk = getStringByKey(myDatabase, tn + "." + cn).get(0);		//System.out.println("cn: " + cn);		//System.out.println("dtnnpkfk: " + dtnnpkfk);		String buf[] = dtnnpkfk.split(",");		String dt = buf[0], nn = buf[1], pk = buf[2], fk = buf[3];		//System.out.println("dt: " + dt);		//System.out.println("nn: " + nn);		//System.out.println("pk: " + pk);		//System.out.println("fk: " + fk);				// not null check		if(nn.equalsIgnoreCase("null")) { nn = "Y"; }		else if(nn.equalsIgnoreCase("notNull")) { nn = "N"; }		else { System.out.println("desc nn error"); return; }		// primary key, foreign key check		String pkfk = "";		if(pk.equalsIgnoreCase("Y") && fk.equalsIgnoreCase("Y")) { pkfk = "PRI/FOR"; }		else if(pk.equalsIgnoreCase("Y") && fk.equalsIgnoreCase("N")) { pkfk = "PRI"; }		else if(pk.equalsIgnoreCase("N") && fk.equalsIgnoreCase("Y")) { pkfk = "FOR"; }				System.out.printf("%-20s %-10s %-10s %-10s\n", cn, dt, nn, pkfk);	}	System.out.println("-------------------------------------------------");  }  public static void deleteData(Database myDatabase, String aKey) {			try {	    DatabaseEntry theKey = new DatabaseEntry(aKey.toLowerCase().getBytes("UTF-8"));	    // Perform the deletion. All records that use this key are	    // deleted.	    myDatabase.delete(null, theKey); 	} catch (Exception e) {	    // Exception handling goes here	    System.out.println("deleteData error");	}  }
  public static void dropTable(Database myDatabase, String tn) {
	ArrayList<String> tnlist = getStringByKey(myDatabase, "TableName");
	// case : NoSuchTable
	if(!contains(tnlist, tn)) { System.out.println("No such table"); return; }

	Boolean isRefeeExist = false;
	
	
	for(String s : tnlist) {	  if(!s.equalsIgnoreCase(tn)) { 
			ArrayList<String> fklist = getStringByKey(myDatabase, s + ".foreignKey");
			ArrayList<String> refTablenameList = new ArrayList<String>();
			for(String p : fklist) {
				String reftn = p.split("@")[1];
				refTablenameList.add(reftn);				//System.out.println("reftn: " + reftn);				//System.out.println("refTablenameList: " + refTablenameList);
			}			//System.out.println("tn: " + tn);	  
			if(contains(refTablenameList, tn)) { isRefeeExist = true; break; }		}
	}
	// case : DropReferencedTableError
	if(isRefeeExist) { System.out.println("Drop table has failed: '" + tn + "' is referenced by other table"); return; }

	// ok, let's remove data
	ArrayList<String> cnlist = new ArrayList<String>();	ArrayList<String> cdlist = getStringByKey(myDatabase, tn + ".columnDef");	for(String cd : cdlist) {		String cn = cd.split(",")[0];		cnlist.add(cn);	}	// delete table info	deleteData(myDatabase, tn + ".columnDef");	deleteData(myDatabase, tn + ".primaryKey");	deleteData(myDatabase, tn + ".foreignKey");	for(String s : cnlist) {		deleteData(myDatabase, tn + "." + s);	}	// delete table name	Cursor cursor = null;	try {	    // Create DatabaseEntry objects	    // use TableName.toLowerCase()	    DatabaseEntry theKey = new DatabaseEntry("tablename".getBytes("UTF-8"));	    DatabaseEntry theData = new DatabaseEntry();		    // Open a cursor using a database handle	    cursor = myDatabase.openCursor(null, null);		    // Position the cursor. Ignoring the return value for clarity	    OperationStatus retVal = cursor.getSearchKey(theKey, theData, 	                                                 LockMode.DEFAULT);		 while (retVal == OperationStatus.SUCCESS) {            String keyString = new String(theKey.getData(), "UTF-8");            String dataString = new String(theData.getData(), "UTF-8");            //System.out.println("dataString: " + dataString);            if(dataString.equalsIgnoreCase(tn)) {				cursor.delete();				break;            }            retVal = cursor.getNextDup(theKey, theData, LockMode.DEFAULT);          }	    	} catch (Exception e) {	  	System.out.println("delete table name error");	    e.printStackTrace();	    return;	} finally {	   // Make sure to close the cursor	   cursor.close();	}			System.out.println("'" + tn + "' table is dropped");		
  }
    public static void main(String args[]) throws ParseException  {        // Environment & Database define	Environment myDbEnvironment = null;	Database myDatabase = null;    /* OPENING DB */    // Open Database Environment or if not, create one.    EnvironmentConfig envConfig = new EnvironmentConfig();    envConfig.setAllowCreate(true);    myDbEnvironment = new Environment(new File("db/"), envConfig);    // Open Database or if not, create one.    DatabaseConfig dbConfig = new DatabaseConfig();    dbConfig.setAllowCreate(true);    dbConfig.setSortedDuplicates(true);    myDatabase = myDbEnvironment.openDatabase(null, "myDatabase", dbConfig);    SimpleDBMSParser parser = new SimpleDBMSParser(System.in);    System.out.print("DB_2012-11249> ");    while (true)    {	        try      {        parser.command(myDatabase, myDbEnvironment);      }      catch (Exception e)      {        printMessage(PRINT_SYNTAX_ERROR);		//e.printStackTrace();        SimpleDBMSParser.ReInit(System.in);      }    }  }  public static void printMessage(int q)  {    switch(q)    {      case PRINT_SYNTAX_ERROR:      	System.out.println("Syntax error");      	break;      case PRINT_CREATE_TABLE:      	System.out.println("\'CREATE TABLE\' requested");      	break;      case PRINT_DROP_TABLE:      	System.out.println("\'DROP TABLE\' requested");      	break;      case PRINT_DESC:      	System.out.println("\'DESC\' requested");      	break;      case PRINT_SHOW_TABLES:      	System.out.println("\'SHOW TABLES\' requested");      	break;      case PRINT_SELECT:      	System.out.println("\'SELECT\' requested");      	break;      case PRINT_INSERT:      	System.out.println("\'INSERT\' requested");      	break;      case PRINT_DELETE:      	System.out.println("\'DELETE\' requested");      	break;      	          }    System.out.print("DB_2012-11249> ");  }  }PARSER_END(SimpleDBMSParser)SKIP : { " " | "\r" | "\t" | "\n" }// set tokens according to grammar.docx, use < IS_NULL >, < IS_NOT_NULL > token additionallyTOKEN : /* Keywords */{  < EXIT : "exit" >| < INT : "int" >| < CHAR : "char" >| < DATE : "date" >| < CREATE_TABLE : "create table" >| < NOT_NULL : "not null" >| < PRIMARY_KEY : "primary key" >| < FOREIGN_KEY : "foreign key" >| < REFERENCES : "references" >| < DROP_TABLE : "drop table" >| < DESC : "desc" >| < SHOW_TABLES : "show tables" >| < SELECT : "select" >| < ASTERISK : "*" >| < AS : "as" >| < FROM : "from" >| < WHERE : "where" >| < OR : "or" >| < AND : "and" >| < NOT : "not" >| < IS : "is" >| < INSERT_INTO : "insert into" >| < VALUES : "values" >| < NULL : "null" >| < DELETE_FROM : "delete from" >| < IS_NULL : "is null" >| < IS_NOT_NULL : "is not null" >}TOKEN :{  < SEMICOLON : ";" >| < LEFT_PAREN : "(" >| < RIGHT_PAREN : ")" >| < COMMA : "," >| < UNDERSCORE : "_" >| < INT_VALUE : (< SIGN >)? (< DIGIT >)+ >| < SIGN : "+" | "-" >| < DIGIT : [ "0"-"9" ] >| < LEGAL_IDENTIFIER : < ALPHABET > (< ALPHABET > | < UNDERSCORE >)* >| < ALPHABET : [ "a"-"z", "A"-"Z" ] >| < PERIOD : "." >| < L : "<" >| < G : ">" >| < LE : "<=" >| < GE : ">=" >| < EQ : "=" >| < NEQ : "!=" >| < QUOTE : "\'" >		| < NON_QUOTE_SPECIAL_CHARACTER : "!" | "#" | "$" | "%" | "&" | "(" | ")" | "*" | "+" | "," | "-" | "." | "/" | ":"    |  ";" | "<" | "=" | ">" | "?" | "@" | "[" | "\\" | "]" | "^" | "_" | "`" | "{" | "|" | "}" | "~" > | < NON_QUOTE_CHARACTER : < DIGIT > | < ALPHABET> | < NON_QUOTE_SPECIAL_CHARACTER > | " " >| < CHAR_STRING : < QUOTE > ( < NON_QUOTE_CHARACTER > )* < QUOTE > >| < DATE_VALUE : < NNNN > "-" < NN > "-" < NN > > //caution| < NNNN : < DIGIT > < DIGIT > < DIGIT > < DIGIT > >| < NN : < DIGIT > < DIGIT > >}void command(Database myDatabase, Environment myDbEnvironment) :{}{  queryList(myDatabase)| (    < EXIT >    < SEMICOLON >    {      closeDb(myDatabase, myDbEnvironment);      System.exit(0);    }  ) }void queryList(Database myDatabase) :{  int q;}{  (    q = query(myDatabase)    < SEMICOLON >    // { createTable}    {      printMessage(q);    }  )+}int query(Database myDatabase) :{  int q;}{  ( createTableQuery(myDatabase) { q = -1; return q; } )| ( dropTableQuery(myDatabase) { q = -1; return q; } )| ( descQuery(myDatabase) { q = -1; return q; } )| ( selectQuery() { q = PRINT_SELECT; return q; } )| ( insertQuery() { q = PRINT_INSERT; return q; } )| ( deleteQuery() { q = PRINT_DELETE; return q; } )| ( showTablesQuery(myDatabase) { q = -1; return q; } )}void createTableQuery(Database myDatabase) :{  String tableName = null;  ArrayList<TableElement> tableElementList = null;  int success;}{  < CREATE_TABLE >  tableName = tableName()  tableElementList = tableElementList()  {	//create Function	createTable(myDatabase, tableName, tableElementList);  }}ArrayList<TableElement> tableElementList() :{	ArrayList<TableElement> telist = new ArrayList<TableElement>();	TableElement te;}{  < LEFT_PAREN >  te = tableElement()  { telist.add(te); }  ( < COMMA >  te = tableElement()  { telist.add(te); }  )*  < RIGHT_PAREN >  { return telist; }}TableElement tableElement() :{ TableElement te; }{  te = columnDefinition() { return te; } | te = tableConstraintDefinition() { return te; }}TableElement columnDefinition() :{ String cn; String dt; String nn = "null"; }{  cn = columnName()  dt = dataType()  ( < NOT_NULL > { nn = "notNull" ;} )?  {	return new TableElement("columnDefinition", new ColumnDef(cn, dt, nn), null, null);  }}TableElement tableConstraintDefinition() :{ TableElement te; }{  te = primaryKeyConstraint() { return te; } | te = referentialConstraint() { return te; }}TableElement primaryKeyConstraint() :{ ArrayList<String> cnlist = new ArrayList<String>(); }{  < PRIMARY_KEY >  cnlist = columnNameList() { return new TableElement("primaryKeyConstraint", null, new PkConstraint(cnlist), null); }}TableElement referentialConstraint() :{ ArrayList<String> fkcl = new ArrayList<String>(); String refTableName; ArrayList<String> rcl = new ArrayList<String>(); }{  < FOREIGN_KEY >  fkcl = columnNameList()  < REFERENCES >  refTableName = tableName()  rcl = columnNameList()  { return new TableElement("foreignKeyConstraint", null, null, new FkConstraint(fkcl, refTableName, rcl)); }}ArrayList<String> columnNameList() :{ ArrayList<String> cnlist = new ArrayList<String>(); String cn; }{  < LEFT_PAREN >  cn = columnName() { cnlist.add(cn); }  ( < COMMA > cn = columnName() { cnlist.add(cn); } )*  < RIGHT_PAREN > { return cnlist; }}String dataType() :{ Token value; }{  < INT > { return "int"; }| (    < CHAR >    < LEFT_PAREN >    value = < INT_VALUE >    < RIGHT_PAREN >    { return "char(" + value.image + ")"; }  )| < DATE > { return "date"; }}String tableName() :{ Token tableName; }{  tableName = < LEGAL_IDENTIFIER > { return tableName.image; }}String columnName() :{ Token columnName; }{  columnName = < LEGAL_IDENTIFIER > { return columnName.image; }}void dropTableQuery(Database myDatabase) :{ String tn; }{  < DROP_TABLE >  tn = tableName()  { dropTable(myDatabase, tn); }}void descQuery(Database myDatabase) :{ String tn; }{  < DESC >  tn = tableName()  { desc(myDatabase, tn); }}void showTablesQuery(Database myDatabase) :{}{  < SHOW_TABLES >  { showTables(myDatabase); }}void selectQuery() :{}{  < SELECT >  selectList()  tableExpression()}void selectList() :{}{  < ASTERISK >| ( selectedColumn() ( < COMMA > selectedColumn() )* )}void selectedColumn() :{}{  // use LOOKAHEAD because tableName() and columnName() has same grammar : legalIdentifier()  ( LOOKAHEAD(2) tableName() < PERIOD > )?  columnName()  ( < AS > columnName() )?}void tableExpression() :{}{  fromClause() ( whereClause() )?}void fromClause() :{}{  < FROM > tableReferenceList()}void tableReferenceList() :{}{  referedTable() ( < COMMA > referedTable() )*}void referedTable() :{}{  tableName() ( < AS > tableName() )?}void whereClause() :{}{  < WHERE > booleanValueExpression()}void booleanValueExpression() :{}{  booleanTerm() ( < OR > booleanTerm() )*}void booleanTerm() :{}{  booleanFactor() ( < AND > booleanFactor() )*}void booleanFactor() :{}{  ( < NOT > )? booleanTest()}void booleanTest() :{}{  predicate() | parenthesizedBooleanExpression()}void parenthesizedBooleanExpression() :{}{  < LEFT_PAREN > booleanValueExpression() < RIGHT_PAREN >}void predicate() :{}{  // use LOOKAHEAD because comparisonPredicate() and nullPredicate() has common atmost 3 tokens  LOOKAHEAD(4)  comparisonPredicate() | nullPredicate()}void comparisonPredicate() :{}{  compOperand()  compOp()  compOperand()}void compOperand() :{}{  // use LOOKAHEAD because tableName() and columnName() has same grammar : legalIdentifier()  comparableValue()| (  ( LOOKAHEAD(2) tableName() < PERIOD > )? columnName() )}void compOp() :{}{  < L > | < G > | < LE > | < GE > | < EQ > | < NEQ >}void comparableValue() :{}{  < INT_VALUE > | < CHAR_STRING > | < DATE_VALUE >}void nullPredicate() :{}{  // use LOOKAHEAD because tableName() and columnName() has same grammar : legalIdentifier()  ( LOOKAHEAD(2) tableName() < PERIOD >)? columnName() nullOperation()}void nullOperation() :{}{  // use additional token to avoid considering is + not + null as is + not null  < IS_NULL >| < IS_NOT_NULL >}void insertQuery() :{}{  < INSERT_INTO > tableName() insertColumnsAndSource()}void insertColumnsAndSource() :{}{  ( columnNameList() )? valueList()}void valueList() :{}{  < VALUES > < LEFT_PAREN > value() ( < COMMA > value() )* < RIGHT_PAREN >}void value() :{}{  < NULL> | comparableValue()}void deleteQuery() :{}{  < DELETE_FROM > tableName() ( whereClause() )?}